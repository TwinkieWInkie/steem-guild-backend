const keystone = require('keystone')
const ObjectId = require('mongodb').ObjectID

process.on('uncaughtException', function (err) {
	console.error(err);
	console.log("Node NOT Exiting...");
});
process.on('errorException', function (err) {
	console.error(err);
	console.log("Node NOT Exiting...");
});

exports = module.exports = function (app) {

	class steemBot {
		constructor() {
			this.posts = []
			this.groups = []

			this.postQuery = keystone.list('Post').model.where('username').ne('all-users')
			this.groupQuery = keystone.list('Group').model.find()

			setInterval(() => {
				this.getGroups()
			
				if (this.groups.length > 0)
					this.groups.forEach((group) => this.syncGroup(group))
			}, 100)

		}

		getGroups() {
			this.groupQuery.exec((err, docs) => {
				this.groups = docs
			})
		}

		syncGroup(group) {
			global.steem.api.getAccountVotes(group.username, (err, posts) => {
				if (err || typeof posts == 'undefined')
					return 

				if (group.currentId == 0) {
					this.setCurrentLength(group, posts.length)
				} else if (group.currentId <= posts.length) {
                    var end = posts.length + 1
                    var curId = group.currentId
                    this.setCurrentLength(group, end)
                    this.createPost(posts[posts.length], )
                    for (var i = curId; i = posts.length; i++) {
                        console.log('looping:'+i)
                        console.log(posts[i])
                        this.createPost(posts[i], group)
                    }
                    console.log('Syncing ' + (posts.length - curId) + ' new posts from: ' + group.username)
                    }
				})
			
		}

		setCurrentLength (group, length) {
			group.currentId = length

			group.save()
		}
		
		createPost(post, group) {
			const Post = new keystone.list('Post').model()
			const split = post.authorperm.split('/')
                console.log('creating post')
			Post.author = split[0]
			Post.permlink = split[1]
			Post.group = ObjectID(group._id)
                console.log(Post)
			Post.save()
		}
	}
	
	return new steemBot()
}
